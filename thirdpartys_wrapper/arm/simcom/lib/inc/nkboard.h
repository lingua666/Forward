#ifndef NKBOARD_H
#define NKBOARD_H
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <PIN_DEF.h>





/*****************************************************************
/*原型声明：	设置LED状态
/*参数说明：	Index: LED索引  ,  0:netLED   1:statusLED   2:alarmLED
				OpenInterval:  打开时长 0: 不使能  >0:时长   单位/毫秒
				CloseInterval:  关闭时长 0: 不使能  >0:时长   单位/毫秒
status:
上线：亮1500ms，关500ms
离线：亮500ms，关1500ms
播放：亮500ms，光500ms

alarm:
报警灯
慢闪：1500/1000
中闪：1000/500
快闪：500/300
关闭：0/500
常亮 500/0
/*				
/*返回值：		0: 成功，  <0: 错误码
*****************************************************************/
int SetLed(int Index, int OpenInterval, int CloseInterval);


/*****************************************************************
/*原型声明：	获取4G模块IMEI
/*参数说明：	szOutIMEI:  接收IMEI内容缓冲区
/*				Size: 接收缓冲区长度
/*返回值：		>0: 实际IMEI内容长度  <0: 错误码
*****************************************************************/
int GetIMEI (char* szOutIMEI, int Size);


/*****************************************************************
/*原型声明：	获取4G模块ICCID
/*参数说明：	szOutICCID:  接收ICCID内容缓冲区
/*				Size: 接收缓冲区长度
/*返回值：		>0: 实际IMEI内容长度  <0: 错误码
*****************************************************************/
int GetICCID(char* szOutICCID, int Size);


/*****************************************************************
/*原型声明：	获取4G模块IMEI
/*参数说明：	pOutSignal: 接收4G模块信号强度数值
/*返回值：		0: 成功  <0: 错误码
*****************************************************************/
int GetSignal(int* pOutSignal);


/*****************************************************************
/*原型声明：	打开音频
/*参数说明：	Volume: 音量
/*				
/*返回值：		0: 成功，  <0: 错误码
*****************************************************************/
int Audio_Open(int Volume);


/*****************************************************************
/*原型声明：	播放音频
/*参数说明：	pAudioData: 音频数据
				DataSize: 数据长度
/*				
/*返回值：		0: 成功，  <0: 错误码
*****************************************************************/
int Audio_Play(uint8_t * pAudioData, int DataSize);

int Audio_Play_32(uint8_t * pAudioData, int DataSize);

/*****************************************************************
/*原型声明：	关闭音频
/*参数说明：	
/*				
/*返回值：		0: 成功，  <0: 错误码
*****************************************************************/
int Audio_Close(void);


/*****************************************************************
/*原型声明：	打开收音机
/*参数说明：	ch：FM频道*1000，(例子：FM92.4MHz，ch=92400)
/*				
/*返回值：		0: 成功，  <0: 错误码
*****************************************************************/
int FM_Open(int ch, int vol);

/*****************************************************************
/*原型声明：	关闭收音机
/*参数说明：	
/*				
/*返回值：		0: 成功，  <0: 错误码
*****************************************************************/
int FM_Close(void);


/*****************************************************************
/*原型声明：	对时
/*参数说明：	 ip:ntp服务器地址，port，端口
/*				
/*返回值：		0: 成功，  <0: 错误码 
*****************************************************************/
int Ntp_time(const char* ip,int port,int64_t * time);



/*****************************************************************
/*原型声明：	获取定位
/*参数说明：	 lat：纬度，lon：精度, time：时间戳，maxTry:超时时间（秒）
/*				
/*返回值：		0: 成功，    -2：超时  ，-1：手动停止
*****************************************************************/
int GPS_loc(double * lat,double* lon,int64_t* time,int maxTry);

int GPS_stop();
/*****************************************************************
/*原型声明：	切换以太网模式网络 
/*参数说明：	  0 wan ，1 lan 
/*				
/*返回值：		0: 成功，  <0: 错误码
*****************************************************************/
int SwitchEthMode(int mode);

/*****************************************************************
/*原型声明：	切换wifi模式 
/*参数说明：	0：sta，  1：ap ，-1：关闭  
/*				
/*返回值：		0: 成功，  <0: 错误码
*****************************************************************/
int SwitchWifiMode(int mode,char* ssid,char* pass);

/*****************************************************************
/*原型声明：	获取电量（电压）
/*参数说明：	  voltage 电压值，单位mv
/*				
/*返回值：		0: 成功，  <0: 错误码
*****************************************************************/
int Get_ADC(int* voltage);


/*****************************************************************
/*原型声明：	获取ip地址
/*参数说明：	ip，掩码，网关
/*				
/*返回值：		0: 成功，  <0: 错误码
*****************************************************************/
int Get_IP(char* ip,char* mask,char* gate);


/*****************************************************************
/*原型声明：	设置ip
/*参数说明：	ip，掩码，网关（如使用dhcp，三个参数传null）
/*				
/*返回值：		0: 成功，  <0: 错误码
*****************************************************************/
int Set_IP(char* ip,char* mask,char* gate);


/*****************************************************************
/*原型声明：	开关adb
/*参数说明：	 status: 0 关闭，1开启
/*				
/*返回值：		0: 成功，  <0: 错误码
*****************************************************************/
int Switch_ADB(int status);


/*****************************************************************
/*原型声明：	 打开功放
/*参数说明：	 
/*				
/*返回值：		
*****************************************************************/
void OpenAMP(void);


/*****************************************************************
/*原型声明：	 关闭功放
/*参数说明：	 
/*				
/*返回值：		
*****************************************************************/
void CloseAMP(void);

/*****************************************************************
/*原型声明：	 打开音频外部输入
/*参数说明：	 
/*				
/*返回值：		
*****************************************************************/
void OpenAUX(void);


/*****************************************************************
/*原型声明：	 关闭音频外部输入
/*参数说明：	 
/*				
/*返回值：		
*****************************************************************/
void CloseAUX(void);

/*****************************************************************
/*原型声明：	 ota升级
/*参数说明：	 size: bin镜像大小（字节） path：bin文件路径
/*				
/*返回值：		
*****************************************************************/
void OTAUpdate(int64_t size,char* path);

/*****************************************************************
/*原型声明：	 获取IO值
/*参数说明：	 Pin: 引脚位置
/*			 	 Direct: 引脚反向 0: 输入    1:输出
/*
/*返回值：
*****************************************************************/
int GetGpio(int Pin, int Direct);

#endif