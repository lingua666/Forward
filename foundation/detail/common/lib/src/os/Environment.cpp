//
// Environment.cpp
//
// $Id: //poco/1.3/Foundation/src/Environment.cpp#2 $
//
// Library: Foundation
// Package: Core
// Module:  Environment
//
// Copyright (c) 2004-2006, Applied Informatics Software Engineering GmbH.
// and Contributors.
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//

#include <cstdlib>
#include <libCommon/os/Environment.h>

#if defined(PLATFORM_OS_FAMILY_VMS)
#include "Environment_VMS.cxx"
#elif defined(PLATFORM_OS_FAMILY_UNIX)
#include "Environment_UNIX.cxx"
#elif defined(PLATFORM_OS_FAMILY_WINDOWS)
#include "Environment_WIN32.cxx"
#endif

_string_type Environment::get(const _string_type& name)
{
	return EnvironmentImpl::getImpl(name);
}

_string_type Environment::get(const _string_type& name, const _string_type& defaultValue)
{
	if (has(name))
		return get(name);
	else
		return defaultValue;
}


bool Environment::has(const _string_type& name)
{
	return EnvironmentImpl::hasImpl(name);
}

void Environment::set(const _string_type& name, const _string_type& value)
{
	EnvironmentImpl::setImpl(name, value);
}

_string_type Environment::osName()
{
	return EnvironmentImpl::osNameImpl();
}


_string_type Environment::osVersion()
{
	return EnvironmentImpl::osVersionImpl();
}


_string_type Environment::osArchitecture()
{
	return EnvironmentImpl::osArchitectureImpl();
}


_string_type Environment::nodeName()
{
	return EnvironmentImpl::nodeNameImpl();
}


_string_type Environment::nodeId()
{
	NodeId id;
	nodeId(id);
	char result[18];
	sprintf(result, "%02x:%02x:%02x:%02x:%02x:%02x",
			id[0],
			id[1],
			id[2],
			id[3],
			id[4],
			id[5]);
	return _string_type(result);
}


int Environment::nodeId(NodeId& id)
{
	return EnvironmentImpl::nodeIdImpl(id);
}

