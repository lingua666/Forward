
#include <libFrameWork_Modbus/TransferUart.h>
#include <libFrameWork_Modbus/TransferUart_Init.h>

namespace _modbus_ {

	namespace	_rtu_ {

		/* Table of CRC values for high-order byte */
		static const UInt8 table_crc_hi[] = {
			0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0,
			0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
			0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
			0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
			0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1,
			0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
			0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1,
			0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
			0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0,
			0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40,
			0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1,
			0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
			0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0,
			0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40,
			0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
			0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
			0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0,
			0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
			0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
			0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
			0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
			0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40,
			0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1,
			0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
			0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0,
			0x80, 0x41, 0x00, 0xC1, 0x81, 0x40
		};

		/* Table of CRC values for low-order byte */
		static const UInt8 table_crc_lo[] = {
			0x00, 0xC0, 0xC1, 0x01, 0xC3, 0x03, 0x02, 0xC2, 0xC6, 0x06,
			0x07, 0xC7, 0x05, 0xC5, 0xC4, 0x04, 0xCC, 0x0C, 0x0D, 0xCD,
			0x0F, 0xCF, 0xCE, 0x0E, 0x0A, 0xCA, 0xCB, 0x0B, 0xC9, 0x09,
			0x08, 0xC8, 0xD8, 0x18, 0x19, 0xD9, 0x1B, 0xDB, 0xDA, 0x1A,
			0x1E, 0xDE, 0xDF, 0x1F, 0xDD, 0x1D, 0x1C, 0xDC, 0x14, 0xD4,
			0xD5, 0x15, 0xD7, 0x17, 0x16, 0xD6, 0xD2, 0x12, 0x13, 0xD3,
			0x11, 0xD1, 0xD0, 0x10, 0xF0, 0x30, 0x31, 0xF1, 0x33, 0xF3,
			0xF2, 0x32, 0x36, 0xF6, 0xF7, 0x37, 0xF5, 0x35, 0x34, 0xF4,
			0x3C, 0xFC, 0xFD, 0x3D, 0xFF, 0x3F, 0x3E, 0xFE, 0xFA, 0x3A,
			0x3B, 0xFB, 0x39, 0xF9, 0xF8, 0x38, 0x28, 0xE8, 0xE9, 0x29,
			0xEB, 0x2B, 0x2A, 0xEA, 0xEE, 0x2E, 0x2F, 0xEF, 0x2D, 0xED,
			0xEC, 0x2C, 0xE4, 0x24, 0x25, 0xE5, 0x27, 0xE7, 0xE6, 0x26,
			0x22, 0xE2, 0xE3, 0x23, 0xE1, 0x21, 0x20, 0xE0, 0xA0, 0x60,
			0x61, 0xA1, 0x63, 0xA3, 0xA2, 0x62, 0x66, 0xA6, 0xA7, 0x67,
			0xA5, 0x65, 0x64, 0xA4, 0x6C, 0xAC, 0xAD, 0x6D, 0xAF, 0x6F,
			0x6E, 0xAE, 0xAA, 0x6A, 0x6B, 0xAB, 0x69, 0xA9, 0xA8, 0x68,
			0x78, 0xB8, 0xB9, 0x79, 0xBB, 0x7B, 0x7A, 0xBA, 0xBE, 0x7E,
			0x7F, 0xBF, 0x7D, 0xBD, 0xBC, 0x7C, 0xB4, 0x74, 0x75, 0xB5,
			0x77, 0xB7, 0xB6, 0x76, 0x72, 0xB2, 0xB3, 0x73, 0xB1, 0x71,
			0x70, 0xB0, 0x50, 0x90, 0x91, 0x51, 0x93, 0x53, 0x52, 0x92,
			0x96, 0x56, 0x57, 0x97, 0x55, 0x95, 0x94, 0x54, 0x9C, 0x5C,
			0x5D, 0x9D, 0x5F, 0x9F, 0x9E, 0x5E, 0x5A, 0x9A, 0x9B, 0x5B,
			0x99, 0x59, 0x58, 0x98, 0x88, 0x48, 0x49, 0x89, 0x4B, 0x8B,
			0x8A, 0x4A, 0x4E, 0x8E, 0x8F, 0x4F, 0x8D, 0x4D, 0x4C, 0x8C,
			0x44, 0x84, 0x85, 0x45, 0x87, 0x47, 0x46, 0x86, 0x82, 0x42,
			0x43, 0x83, 0x41, 0x81, 0x80, 0x40
		};

		UInt16 TransferUart::modbus_rtu_crc16(UInt8 *buffer, UInt32 buffer_length)
		{
			UInt8 crc_hi = 0xFF; /* high CRC byte initialized */
			UInt8 crc_lo = 0xFF; /* low CRC byte initialized */
			unsigned int i; /* will index into CRC lookup */

							/* pass through message buffer */
			while (buffer_length--) {
				i = crc_hi ^ *buffer++; /* calculate the CRC  */
				crc_hi = crc_lo ^ table_crc_hi[i];
				crc_lo = table_crc_lo[i];
			}

			return (crc_hi << 8 | crc_lo);
		}

		int TransferUart::InitEnvironment(UInt16 uIOThreadNum, UInt8 uProcThreadNum)
		{
			static TransferUart_Init Uart_Init(uIOThreadNum, uProcThreadNum);
			return 1;
		}

		TransferUart::self_sptr TransferUart::Alloc(void)
		{
			static MemPool_type s_Pool(sizeof(TransferUart));
			ITransfer* pTransfer = reinterpret_cast<ITransfer*>(s_Pool.AllocObj<TransferUart>());
			return self_sptr(pTransfer,
				function20_bind(&MemPool_type::FreeMemObj<TransferUart>, &s_Pool, pTransfer));
		}

		TransferUart::TransferUart(void)
		{
			_Info.Type = enType_RTU;
		}

		TransferUart::~TransferUart(void)
		{
			Release();
		}

		int TransferUart::Init(bool isOriginal)
		{
			_isOriginal = isOriginal;
			return 1;
		}

		int TransferUart::Release(void)
		{
			if (_Uart_sptr)
				_Uart_sptr->Release();

			return 1;
		}

		int TransferUart::Open(const _mod_string& ComName, const _mod_string& BaudRate,
			const _mod_string& DataBit, const _mod_string& StopBit,
			const _mod_string& Parity, const HFNDestroy& hDestroy)
		{
			Uarts_HalfDuplex_sptr sptr = Uarts_HalfDuplex_sptr(new Uarts_HalfDuplex());
			sptr->Init(function20_bind_Ex(&TransferUart::isFullData, this));

			PreOpen(function20_bind(&TransferUart::HandlePreOpen, this,
				sptr, ComName, BaudRate, DataBit, StopBit, Parity, hDestroy));

			if (Open_impl() == -1)
				return -1;

			_Uart_sptr = sptr;
			_Info.sName = ComName;

			_uuid_::MD5Engine Md5;
			Md5.update(_Info.sName.c_str(), _Info.sName.size());
			_sID = _uuid_::DigestEngine::digestToHex(Md5.digest()).c_str();
			_sSessionID = GetType() + _sID;
			return 1;
		}

		int TransferUart::HandlePreOpen(const Uarts_HalfDuplex_sptr& sptr, const _mod_string& ComName,
			const _mod_string& BaudRate, const _mod_string& DataBit, const _mod_string& StopBit,
			const _mod_string& Parity, const HFNDestroy& hDestroy)
		{
			Close();

			if (sptr->Open(ComName, BaudRate, DataBit, StopBit, Parity, hDestroy) == -1)
				return -1;

			return 1;
		}

		int TransferUart::Close(void)
		{
			if (!_Uart_sptr)
				return -1;

			return _Uart_sptr->Close();
		}

		int TransferUart::PreOpen(const HFNPreOpen& hPre)
		{
			_hOpenPre = hPre;
			return 1;
		}

		int TransferUart::Open_impl(void)
		{
			return _hOpenPre ? _hOpenPre() : -1;
		}

		int TransferUart::Send(const char* c_szData, UInt32 uSize,
			const _mod_string& sIdentity,
			const HFNResponds& hResp, UInt8 u8Priority,
			Int16 ReSendTimer, Int16 ReSendInterval)
		{
			if (!_Uart_sptr)
				return -1;

			return _Uart_sptr->Send(c_szData, uSize, sIdentity, hResp, u8Priority, ReSendTimer, ReSendInterval);
		}

		const TransferUart::Transfer_INFO& TransferUart::GetInfo(void) const
		{
			return _Info;
		}

		int TransferUart::isFullData(const char* c_szData, UInt32 uSize, Int32* iByteRead)
		{
			//modubus数据格式
			//【1字节】   【1字节】  【1字节】  【N字节】   【2字节】
			//【从机地址】【功能号】【数据长度】【数据内容】【CRC校验】 
			if ( /*c_szData[0] == 0x01 &&*/ uSize > 3)
			{
				UInt8 uHead = 0, uLen = 0;
				switch ((UInt8)c_szData[1])
				{
				case 0x01://读线圈寄存器
				case 0x02://读离散输入寄存器
				case 0x03://读保持寄存器
				case 0x04://读输入寄存器
				{
					uHead = 3;
					uLen = uHead + c_szData[2] + 2;
				}
				break;
				case 0x05://写单个线圈寄存器
				case 0x06://写单个保持寄存器
				{
					uHead = 4;
					uLen = uHead + 2 + 2;
				}
				break;
				case 0x0F://写多个线圈寄存器
				case 0x10://写多个保持寄存器
				{
					if (!_isOriginal)
					{//非原样返回ACK
						uHead = 6;
						uLen = uHead + 2;
					}
					else 
					{//原样返回ACK
						uHead = 6;
						uLen = uHead + c_szData[uHead] + 1 + 2;
					}
				}
				break;
				default:
				{
					printf("unknow code:%d\r\n", c_szData[1]);
					return -1;
				}
				break;
				}

				if (uSize >= uLen)
				{
					UInt16 Crc_Calculated = modbus_rtu_crc16((UInt8*)c_szData, uLen - 2);
					UInt16 Crc_Received = ((UInt8)c_szData[uLen - 2] << 8) | (UInt8)c_szData[uLen - 1];
					if (Crc_Calculated == Crc_Received)
					{//校验正确
						*iByteRead = uSize;
						return uHead;
					}
					else
					{
						printf("modbus_rtu_crc16(%d,%d) CheckOut Failed!!\r\n", Crc_Calculated, Crc_Received);
					}
				}
			}

			return -1;
		}

		int TransferUart::RegisterRecvEvent(const HFNRecvEvent& hEvent)
		{
			if (!_Uart_sptr)
				return -1;

			return _Uart_sptr->RegisterRecvEvent(hEvent);
		}

		const _mod_string	TransferUart::GetType(void) const
		{
			return "00";
		}

		const _mod_string	TransferUart::GetID(void) const
		{
			return _sID;
		}

		const _mod_string	TransferUart::GetSessionID(void) const
		{
			return _sSessionID;
		}

		const int	TransferUart::GetSessionIDLength(void) const
		{
			return _sSessionID.size();
		}

	} //_stream_svr_

}
